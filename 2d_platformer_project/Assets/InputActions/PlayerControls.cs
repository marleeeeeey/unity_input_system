//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerNormal"",
            ""id"": ""18ce72d0-ed23-46b9-b007-2f0659db3bdc"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""7cabe5b2-047a-4cc0-aaeb-c5d40863314b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveHorizontal"",
                    ""type"": ""Button"",
                    ""id"": ""e5a5b3c1-a1b8-4e64-9c9c-93ee24419fc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveVertical"",
                    ""type"": ""Value"",
                    ""id"": ""6a96ac2f-a97c-4a8e-8fc6-96a7abaccbb8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Value"",
                    ""id"": ""61a55c4a-2822-4b75-95d6-cf0a1285901e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8432a0ef-7b16-41ac-8898-8291b153bc32"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e3d12c1-a235-497c-b655-50fd8127c3f2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis Horizontal"",
                    ""id"": ""b397e016-9475-40e4-bf25-b0a2ae970915"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""878b1077-7429-46b1-8307-3f89b5e251f6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""078800a2-9222-4ca0-9624-b25380d33e51"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Gamepad"",
                    ""id"": ""da94a649-644b-4d83-9d65-ec2b274f94b8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cbabf3c2-0996-4f73-905b-19bf97914248"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""515e1689-2ae0-456c-b4b3-2555432f1f73"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis Vertical"",
                    ""id"": ""82a7bd60-0d04-4c41-8126-ed8ac1e02db1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""762e17d4-38ed-46a3-8ab4-53ed18397aaf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""227aa94c-33f5-481a-86ec-33f0ed5272fe"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Gamepad"",
                    ""id"": ""3251d955-e323-474f-afcb-0fe716823bf2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5dea2e98-44e4-4d89-ae2c-9fd997563b7b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""12280df3-0af2-4591-ab01-992de196dbec"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5c60bfe4-5f25-41b0-9a51-934cbc075b09"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01a8dd36-4ec4-4e70-a74b-cbbdf45bca61"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerUnderwater"",
            ""id"": ""b803ac78-85cb-4594-a0b8-a114594c98be"",
            ""actions"": [
                {
                    ""name"": ""Swim"",
                    ""type"": ""Button"",
                    ""id"": ""e8631b48-10cd-4275-86c5-579e5d079d57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dive"",
                    ""type"": ""Button"",
                    ""id"": ""a5910eca-5d2f-4484-91bb-cdfc633b3d6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""491e7188-472d-4fbe-947e-8b6b80da41ad"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1c80e58-8a61-4fae-905d-91aac620c794"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInCar"",
            ""id"": ""d7da81bf-e72a-409e-b9fc-c9c387b914ef"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""e0bdaadc-6af6-4a2b-9e43-7836fed831bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerNormal
        m_PlayerNormal = asset.FindActionMap("PlayerNormal", throwIfNotFound: true);
        m_PlayerNormal_Jump = m_PlayerNormal.FindAction("Jump", throwIfNotFound: true);
        m_PlayerNormal_MoveHorizontal = m_PlayerNormal.FindAction("MoveHorizontal", throwIfNotFound: true);
        m_PlayerNormal_MoveVertical = m_PlayerNormal.FindAction("MoveVertical", throwIfNotFound: true);
        m_PlayerNormal_Attack = m_PlayerNormal.FindAction("Attack", throwIfNotFound: true);
        // PlayerUnderwater
        m_PlayerUnderwater = asset.FindActionMap("PlayerUnderwater", throwIfNotFound: true);
        m_PlayerUnderwater_Swim = m_PlayerUnderwater.FindAction("Swim", throwIfNotFound: true);
        m_PlayerUnderwater_Dive = m_PlayerUnderwater.FindAction("Dive", throwIfNotFound: true);
        // PlayerInCar
        m_PlayerInCar = asset.FindActionMap("PlayerInCar", throwIfNotFound: true);
        m_PlayerInCar_Exit = m_PlayerInCar.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerNormal
    private readonly InputActionMap m_PlayerNormal;
    private List<IPlayerNormalActions> m_PlayerNormalActionsCallbackInterfaces = new List<IPlayerNormalActions>();
    private readonly InputAction m_PlayerNormal_Jump;
    private readonly InputAction m_PlayerNormal_MoveHorizontal;
    private readonly InputAction m_PlayerNormal_MoveVertical;
    private readonly InputAction m_PlayerNormal_Attack;
    public struct PlayerNormalActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerNormalActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerNormal_Jump;
        public InputAction @MoveHorizontal => m_Wrapper.m_PlayerNormal_MoveHorizontal;
        public InputAction @MoveVertical => m_Wrapper.m_PlayerNormal_MoveVertical;
        public InputAction @Attack => m_Wrapper.m_PlayerNormal_Attack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerNormal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerNormalActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerNormalActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @MoveHorizontal.started += instance.OnMoveHorizontal;
            @MoveHorizontal.performed += instance.OnMoveHorizontal;
            @MoveHorizontal.canceled += instance.OnMoveHorizontal;
            @MoveVertical.started += instance.OnMoveVertical;
            @MoveVertical.performed += instance.OnMoveVertical;
            @MoveVertical.canceled += instance.OnMoveVertical;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IPlayerNormalActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @MoveHorizontal.started -= instance.OnMoveHorizontal;
            @MoveHorizontal.performed -= instance.OnMoveHorizontal;
            @MoveHorizontal.canceled -= instance.OnMoveHorizontal;
            @MoveVertical.started -= instance.OnMoveVertical;
            @MoveVertical.performed -= instance.OnMoveVertical;
            @MoveVertical.canceled -= instance.OnMoveVertical;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IPlayerNormalActions instance)
        {
            if (m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerNormalActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerNormalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerNormalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerNormalActions @PlayerNormal => new PlayerNormalActions(this);

    // PlayerUnderwater
    private readonly InputActionMap m_PlayerUnderwater;
    private List<IPlayerUnderwaterActions> m_PlayerUnderwaterActionsCallbackInterfaces = new List<IPlayerUnderwaterActions>();
    private readonly InputAction m_PlayerUnderwater_Swim;
    private readonly InputAction m_PlayerUnderwater_Dive;
    public struct PlayerUnderwaterActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerUnderwaterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swim => m_Wrapper.m_PlayerUnderwater_Swim;
        public InputAction @Dive => m_Wrapper.m_PlayerUnderwater_Dive;
        public InputActionMap Get() { return m_Wrapper.m_PlayerUnderwater; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerUnderwaterActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerUnderwaterActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerUnderwaterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerUnderwaterActionsCallbackInterfaces.Add(instance);
            @Swim.started += instance.OnSwim;
            @Swim.performed += instance.OnSwim;
            @Swim.canceled += instance.OnSwim;
            @Dive.started += instance.OnDive;
            @Dive.performed += instance.OnDive;
            @Dive.canceled += instance.OnDive;
        }

        private void UnregisterCallbacks(IPlayerUnderwaterActions instance)
        {
            @Swim.started -= instance.OnSwim;
            @Swim.performed -= instance.OnSwim;
            @Swim.canceled -= instance.OnSwim;
            @Dive.started -= instance.OnDive;
            @Dive.performed -= instance.OnDive;
            @Dive.canceled -= instance.OnDive;
        }

        public void RemoveCallbacks(IPlayerUnderwaterActions instance)
        {
            if (m_Wrapper.m_PlayerUnderwaterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerUnderwaterActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerUnderwaterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerUnderwaterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerUnderwaterActions @PlayerUnderwater => new PlayerUnderwaterActions(this);

    // PlayerInCar
    private readonly InputActionMap m_PlayerInCar;
    private List<IPlayerInCarActions> m_PlayerInCarActionsCallbackInterfaces = new List<IPlayerInCarActions>();
    private readonly InputAction m_PlayerInCar_Exit;
    public struct PlayerInCarActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerInCarActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_PlayerInCar_Exit;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInCar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInCarActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInCarActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInCarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInCarActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IPlayerInCarActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IPlayerInCarActions instance)
        {
            if (m_Wrapper.m_PlayerInCarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInCarActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInCarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInCarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInCarActions @PlayerInCar => new PlayerInCarActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerNormalActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMoveHorizontal(InputAction.CallbackContext context);
        void OnMoveVertical(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IPlayerUnderwaterActions
    {
        void OnSwim(InputAction.CallbackContext context);
        void OnDive(InputAction.CallbackContext context);
    }
    public interface IPlayerInCarActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
}
